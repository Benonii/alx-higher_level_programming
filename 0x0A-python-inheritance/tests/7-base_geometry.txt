#7-base_geometry.txt

This is a doctest for the class BaseGeometry.

This class defines an integer_validator function.

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> bg = BaseGeometry()
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)

It returns an Exception if area is called. Since it's not implemented yet.
	>>> bg.area()
	Traceback (most recent call last):
	  ...
	Exception: area() is not implemented

It returns a TypeError if the value is not an integer.
	>>> try:
	...     bg.integer_validator("name", "John")
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	... 
	[TypeError] name must be an integer

It returns a ValueError if the value is <= 0
	>>> try:
	...     bg.integer_validator("age", 0)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	... 
	[ValueError] age must be greater than 0
	>>> try:
	...     bg.integer_validator("distance", -4)
	... except Exception as e:
	...     print("[{}] {}".format(e.__class__.__name__, e))
	... 
	[ValueError] distance must be greater than 0

	>>> bg.integer_validator("age", None)
	Traceback (most recent call last):
	  ...
	TypeError: age must be an integer

	>>> bg.integer_validator()
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

	>>> bg.integer_validator("age")
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	>>> bg.integer_validator("age")
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	TypeError: integer_validator() missing 1 required positional argument: 'value'

	>>> bg.integer_validator("age", 1)

	>>> bg.integer_validator("age", 0)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 26, in integer_validator
	    raise ValueError("{} must be greater than 0".format(name))
	ValueError: age must be greater than 0

	>>> bg.integer_validator("age", -4)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 26, in integer_validator
	    raise ValueError("{} must be greater than 0".format(name))
	ValueError: age must be greater than 0

	>>> bg.integer_validator("age", (4,))
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
	    raise TypeError("{} must be an integer".format(name))
	TypeError: age must be an integer

	>>> bg.integer_validator("age", "4")
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
	    raise TypeError("{} must be an integer".format(name))
	TypeError: age must be an integer

	>>> bg.integer_validator("age", [3])
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
	    raise TypeError("{} must be an integer".format(name))
	TypeError: age must be an integer

	>>> bg.integer_validator("age", True)

	>>> bg.integer_validator("age", {3, 4})
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
	    raise TypeError("{} must be an integer".format(name))
	TypeError: age must be an integer

	>>> bg.integer_validator("age", None)
	Traceback (most recent call last):
	  File "<stdin>", line 1, in <module>
	  File "/root/alx-higher_level_programming/0x0A-python-inheritance/7-base_geometry.py", line 23, in integer_validator
	    raise TypeError("{} must be an integer".format(name))
	TypeError: age must be an integer
